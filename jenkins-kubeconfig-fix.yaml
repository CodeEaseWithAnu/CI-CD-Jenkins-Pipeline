pipeline {
    agent any

    environment {
        DOCKER_REGISTRY = 'anusiju'
        IMAGE_TAG = "${BUILD_NUMBER}"
        KUBECONFIG_CREDENTIAL = 'kubeconfig'
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main',
                    url: 'https://github.com/CodeEaseWithAnu/CI-CD-Jenkins-Pipeline.git',
                    credentialsId: 'github-credentials'
                echo '‚úÖ Code checked out successfully'
            }
        }

        stage('Install & Test Backend') {
            steps {
                dir('backend') {
                    sh 'npm install'
                    sh 'npm test'
                }
            }
        }

        stage('Install & Test Frontend') {
            steps {
                dir('frontend') {
                    sh 'npm install'
                    sh 'npm test -- --coverage --watchAll=false'
                }
            }
        }

        stage('Build & Push Docker Images') {
            parallel {
                stage('Backend Image') {
                    steps {
                        script {
                            dir('backend') {
                                def backendImage = docker.build("${DOCKER_REGISTRY}/mern-backend:${IMAGE_TAG}")
                                docker.withRegistry('https://registry.hub.docker.com', 'docker-hub-credentials') {
                                    backendImage.push()
                                    backendImage.push('latest')
                                }
                            }
                        }
                    }
                }
                stage('Frontend Image') {
                    steps {
                        script {
                            dir('frontend') {
                                def frontendImage = docker.build("${DOCKER_REGISTRY}/mern-frontend:${IMAGE_TAG}")
                                docker.withRegistry('https://registry.hub.docker.com', 'docker-hub-credentials') {
                                    frontendImage.push()
                                    frontendImage.push('latest')
                                }
                            }
                        }
                    }
                }
            }
        }

        stage('Setup Kubernetes RBAC') {
            steps {
                script {
                    withKubeConfig([credentialsId: "${KUBECONFIG_CREDENTIAL}"]) {
                        sh '''
                            echo "‚úÖ Creating RBAC permissions if not exist..."
                            kubectl create clusterrolebinding jenkins-admin-binding \
                              --clusterrole=cluster-admin \
                              --serviceaccount=default:jenkins-sa || true
                        '''
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    withKubeConfig([credentialsId: "${KUBECONFIG_CREDENTIAL}"]) {
                        sh '''
                            echo "‚úÖ Updating deployment YAML with new image tags..."
                            sed -i 's|your-registry/mern-backend:latest|${DOCKER_REGISTRY}/mern-backend:${IMAGE_TAG}|g' k8s/backend-deployment.yaml
                            sed -i 's|your-registry/mern-frontend:latest|${DOCKER_REGISTRY}/mern-frontend:${IMAGE_TAG}|g' k8s/frontend-deployment.yaml

                            echo "‚úÖ Applying Kubernetes manifests..."
                            kubectl apply -f k8s/

                            echo "‚úÖ Waiting for deployments to roll out..."
                            kubectl rollout status deployment/backend-deployment
                            kubectl rollout status deployment/frontend-deployment
                        '''
                    }
                }
            }
        }

        stage('Verify Deployment') {
            steps {
                script {
                    withKubeConfig([credentialsId: "${KUBECONFIG_CREDENTIAL}"]) {
                        sh '''
                            echo "‚úÖ Verifying Pods and Services..."
                            kubectl get pods
                            kubectl get svc
                            kubectl wait --for=condition=ready pod -l app=backend --timeout=300s
                            kubectl wait --for=condition=ready pod -l app=frontend --timeout=300s
                        '''
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'üéâ Pipeline completed successfully!'
        }
        failure {
            echo '‚ùå Pipeline failed!'
        }
        always {
            sh 'docker system prune -f'
        }
    }
}
